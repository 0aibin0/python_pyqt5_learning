# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'D:\Tools\python38\untitled000.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5.QtCore import pyqtSlot
from PyQt5.QtGui import *
from PyQt5 import QtWidgets, QtGui
from PyQt5.QtWidgets import *
from PyQt5 import QtWidgets, QtCore
from PyQt5.QtCore import *
import subprocess
import re
import logging
from openpyxl import load_workbook
from openpyxl.styles import PatternFill
import time


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(651, 480)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 10, 631, 121))
        self.groupBox.setObjectName("groupBox")
        self.comboBox = QtWidgets.QComboBox(self.groupBox)
        self.comboBox.setGeometry(QtCore.QRect(500, 30, 71, 22))
        self.comboBox.setObjectName("comboBox")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(450, 29, 41, 21))
        self.label.setObjectName("label")
        self.cmdpath = QtWidgets.QLineEdit(self.groupBox)
        self.cmdpath.setGeometry(QtCore.QRect(50, 30, 381, 20))
        self.cmdpath.setObjectName("cmdpath")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(13, 30, 31, 20))
        self.label_2.setObjectName("label_2")
        self.cmds = QtWidgets.QLineEdit(self.groupBox)
        self.cmds.setGeometry(QtCore.QRect(50, 70, 381, 20))
        self.cmds.setObjectName("cmds")
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setGeometry(QtCore.QRect(13, 70, 31, 20))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.groupBox)
        self.label_4.setGeometry(QtCore.QRect(450, 70, 41, 21))
        self.label_4.setObjectName("label_4")
        self.splitsymbol = QtWidgets.QLineEdit(self.groupBox)
        self.splitsymbol.setGeometry(QtCore.QRect(500, 70, 71, 20))
        self.splitsymbol.setObjectName("splitsymbol")
        self.send = QtWidgets.QPushButton(self.groupBox)
        self.send.setGeometry(QtCore.QRect(580, 30, 41, 61))
        self.send.setObjectName("send")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(10, 230, 631, 201))
        self.groupBox_2.setObjectName("groupBox_2")
        self.textBrowser = QtWidgets.QTextBrowser(self.groupBox_2)
        self.textBrowser.setGeometry(QtCore.QRect(10, 20, 611, 171))
        self.textBrowser.setObjectName("textBrowser")
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(10, 130, 631, 91))
        self.groupBox_3.setObjectName("groupBox_3")
        self.openfile = QtWidgets.QPushButton(self.groupBox_3)
        self.openfile.setGeometry(QtCore.QRect(440, 20, 75, 23))
        self.openfile.setObjectName("openfile")
        self.OUTPUTASFILE = QtWidgets.QCheckBox(self.groupBox_3)
        self.OUTPUTASFILE.setGeometry(QtCore.QRect(440, 60, 81, 21))
        self.OUTPUTASFILE.setObjectName("OUTPUTASFILE")
        self.startconvert = QtWidgets.QPushButton(self.groupBox_3)
        self.startconvert.setGeometry(QtCore.QRect(520, 20, 101, 61))
        self.startconvert.setObjectName("startconvert")
        self.filepath = QtWidgets.QLineEdit(self.groupBox_3)
        self.filepath.setGeometry(QtCore.QRect(50, 20, 381, 20))
        self.filepath.setObjectName("filepath")
        self.label_5 = QtWidgets.QLabel(self.groupBox_3)
        self.label_5.setGeometry(QtCore.QRect(13, 20, 31, 20))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.groupBox_3)
        self.label_6.setGeometry(QtCore.QRect(250, 60, 51, 21))
        self.label_6.setObjectName("label_6")
        self.startindex = QtWidgets.QLineEdit(self.groupBox_3)
        self.startindex.setGeometry(QtCore.QRect(300, 60, 71, 20))
        self.startindex.setObjectName("startindex")
        self.SWAP = QtWidgets.QCheckBox(self.groupBox_3)
        self.SWAP.setGeometry(QtCore.QRect(380, 60, 51, 21))
        self.SWAP.setObjectName("SWAP")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 651, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox.setTitle(_translate("MainWindow", "Command"))
        self.label.setText(_translate("MainWindow", "方  法"))
        self.label_2.setText(_translate("MainWindow", "路径"))
        self.label_3.setText(_translate("MainWindow", "命令"))
        self.label_4.setText(_translate("MainWindow", "分隔符"))
        self.send.setText(_translate("MainWindow", "Send"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Log"))
        self.groupBox_3.setTitle(_translate("MainWindow", "zcv-converter"))
        self.openfile.setText(_translate("MainWindow", "打开文件"))
        self.OUTPUTASFILE.setText(_translate("MainWindow", "以文件输出"))
        self.startconvert.setText(_translate("MainWindow", "START"))
        self.label_5.setText(_translate("MainWindow", "路径"))
        self.label_6.setText(_translate("MainWindow", "起始行列"))
        self.SWAP.setText(_translate("MainWindow", "SWAP"))


class controller_main(QMainWindow, Ui_MainWindow):

    def __init__(self, parent=None):

        super(controller_main, self).__init__(parent)
        self.setupUi(self)
        self.cmdss = None
        self.paths = None
        self.splitsymbol = None
        self.echo = 'echo'
        self.historycmd = '/sys/class/display/dsi/dcs_write'
        self.file_path = ''
        self.isswap = False
        self.astxt = False
        self.wb = None
        self.start_index = '1,1'

        self.comboBox.addItem('echo')
        self.comboBox.addItem('cat')
        self.comboBox.addItem('cd')
        self.comboBox.addItem('ls')
        self.comboBox.addItem('自定义')
        self.comboBox.currentIndexChanged.connect(self.activated)
        self.cmdpath.setText(self.historycmd)

    @pyqtSlot()
    def on_send_clicked(self):
        self.cmdss = self.cmds.text()
        self.paths = self.cmdpath.text()
        self.echo = self.comboBox.currentText()
        if self.echo == 'echo':
            commandline = 'adb shell "' + self.echo + ' ' + self.cmdss + ' > %s' % self.paths + '"'
        else:
            commandline = 'adb shell "' + self.echo + ' %s' % self.paths + '"'
        # self.run_command_line('adb root')
        result, out = self.run_command_line(commandline)

        self.append_text(str(out))

    @pyqtSlot()
    def on_openfile_clicked(self):
        self.file_path = self.dialog()
        self.filepath.setText(self.file_path)

    @pyqtSlot()
    def on_startconvert_clicked(self):
        self.textBrowser.clear()
        try:

            self.wb = load_workbook(filename=self.file_path)
            sheet1 = self.wb.worksheets[0]
            maxrow_s1 = sheet1.max_row
        except Exception as e:
            self.append_text(str(e))
            return
        header = "ocv-capacity-table-0 ="
        result_list = []
        style_result_list = []

        try:
            if not self.startindex.text().strip() == '':
                self.start_index = self.startindex.text()
            start_row = int(self.start_index.split(',')[0])
            start_col = int(self.start_index.split(',')[1])
        except Exception as e:
            self.append_text(str(e))
            return

        try:
            if self.SWAP.isChecked() == True:
                capindex = start_col + 1
                percentindex = start_col
            else:
                capindex = start_col
                percentindex = start_col + 1
            for l in range(start_row, maxrow_s1 + 1):
                capcity = sheet1.cell(row=l, column=capindex).value
                percent = sheet1.cell(row=l, column=percentindex).value
                result = '<' + str(capcity * 1000) + ' ' + '%.0f' % float(percent * 100) + '>'
                result_list.append(result)

        except Exception as e:
            self.append_text(str(e))
            return

        for i in range(len(result_list)):
            if i % 3 == 0 and i > 0:

                style_result_list.append('\n' + ' ' * len(header) + result_list[i])
            else:
                style_result_list.append(result_list[i])

        if self.OUTPUTASFILE.isChecked() == True:
            f = open("output%s.txt" % time.strftime('%Y%m%d%H%M%S', time.localtime(time.time())), "x")
            f.write(header + ','.join(style_result_list) + ';')
            f.close()
        self.append_text(header + ','.join(style_result_list) + ';')

    def run_command_line(self, command_line='NO_COMMAND_GIVEN'):

        P = subprocess.Popen(command_line, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)
        out = P.communicate()[0]
        out = out.decode()
        out = re.sub(r'\r+\n', r'\n', out)

        # logging.debug("Command '{0}' output: '{1}'".format(command_line, out))
        result = P.wait()
        if result != 0:
            logging.warning("Command '{0}' failed to run, output:{1}".format(command_line, out))
        return result, out

    def activated(self, index):
        self.echo = self.comboBox.currentText()

    def append_text(self, msg):

        self.textBrowser.insertPlainText(msg)
        self.textBrowser.moveCursor(QTextCursor.End)

    def dialog(self):
        file, check = QFileDialog.getOpenFileName(None, "QFileDialog.getOpenFileName()",
                                                  "", "All Files (*);;Excel Files (*.xlsx)")
        if check:
            return file
        else:
            return ''


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    login = controller_main()
    login.show()
    sys.exit(app.exec_())
